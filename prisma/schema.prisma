generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(EMPLOYEE)
  token     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departmentId String?
  officeId     String?

  department       Department?       @relation(fields: [departmentId], references: [id])
  office           Office?           @relation(fields: [officeId], references: [id])
  shiftAllocations ShiftAllocation[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@index([departmentId])
  @@index([officeId])
  @@index([officeId, departmentId])
  @@map("users")
}

model Shift {
  id        String   @id @default(uuid())
  name      String
  clockIn   String // Format: "HH:MM" (e.g., "08:00")
  clockOut  String // Format: "HH:MM" (e.g., "17:00")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([name])
  @@map("shifts")
}

model TimeZone {
  id        String   @id @default(uuid())
  name      String
  nameCode  String   @unique
  timeCode  String   @unique
  timezone  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offices Office[]

  @@index([nameCode])
  @@index([timeCode])
  @@index([timezone])
  @@map("time_zones")
}

model Department {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@index([name])
  @@map("departments")
}

model Office {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  address     String
  phone       String
  email       String   @unique
  website     String?
  logo        String?
  description String?
  polygonArea Json? // Array of coordinates [[lat, lng], ...]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  timeZoneId String

  timeZone TimeZone @relation(fields: [timeZoneId], references: [id])
  users    User[]

  @@index([code])
  @@index([email])
  @@index([isActive])
  @@index([timeZoneId])
  @@index([name])
  @@map("offices")
}

model ShiftAllocation {
  id                String           @id @default(uuid())
  userId            String
  shiftId           String?
  date              DateTime         @db.Date
  scheduledClockIn  String // Format: "HH:MM" - scheduled time
  scheduledClockOut String // Format: "HH:MM" - scheduled time
  actualClockIn     DateTime? // Actual clock in time (optional)
  actualClockOut    DateTime? // Actual clock out time (optional)
  status            AttendanceStatus @default(PRESENT)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([status])
  @@index([shiftId])
  @@index([userId, date, status])
  @@index([date, status])
  @@map("shift_allocations")
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum AttendanceStatus {
  PRESENT
  LEAVE
  DAY_OFF
  SICK
  ABSENT
  PERMISSION
}
