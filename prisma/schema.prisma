generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(EMPLOYEE)
  token     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attendances Attendance[]
  leaves      Leave[]

  @@map("users")
}

model Attendance {
  id        String           @id @default(uuid())
  userId    String
  checkIn   DateTime?
  checkOut  DateTime?
  workMode  WorkMode         @default(OFFICE)
  status    AttendanceStatus @default(PRESENT)
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attendances")
}

model Leave {
  id         String      @id @default(uuid())
  userId     String
  type       LeaveType
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leaves")
}

model Meeting {
  id          String        @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  attendees   String[]
  status      MeetingStatus @default(SCHEDULED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("meetings")
}

model Notice {
  id        String     @id @default(uuid())
  title     String
  content   String
  type      NoticeType @default(GENERAL)
  priority  Priority   @default(NORMAL)
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("notices")
}

model Shift {
  id        String   @id @default(uuid())
  name      String
  clockIn   String // Format: "HH:MM" (e.g., "08:00")
  clockOut  String // Format: "HH:MM" (e.g., "17:00")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shifts")
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum WorkMode {
  OFFICE
  HOME
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
  EMERGENCY
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MeetingStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum NoticeType {
  GENERAL
  URGENT
  HOLIDAY
  POLICY
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}
